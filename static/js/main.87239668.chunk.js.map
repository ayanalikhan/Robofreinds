{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","constants.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","seachfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialStateSearch","searchField","initialStateRobots","isPending","logger","createLogger","rootReducer","combineReducers","searchRobots","action","Object","assign","payload","requestRobots","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.87239668.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn(\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n         <img alt='robots' src={`https://robohash.org/${id}?200*200`} />\n         <div>\n           <h2>{name}</h2>\n           <p>{email}</p>\n         </div>\n      </div>\n\n\t\t);\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n     <div>\n      {\n       robots.map((user, i) => {\n  \t    return (\n  \t    \t<Card \n  \t          key={i} \n  \t          id={robots[i].id} \n  \t          name={robots[i].name} \n  \t          email={robots[i].email}\n  \t          />\n  \t    );\n  })\n}\n     </div>\n );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({seachfield, searchChange }) => {\n  return (\n  \t<div className='pa2'>\n     <input \n       className='pa3 ba b--green bg-lightest-blue'\n       type='search' \n       placeholder='search robots' \n       onChange={searchChange}\n     />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n      <div style={{overflow: 'scroll', border : '2px solid black', height: '700px'}}>\n        {props.children}\n      </div>\n\n\t\t)\n};\n\nexport default Scroll","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\n\nclass App extends Component {\nconstructor () {\nsuper()\n\tthis.state = {\n\trobots : [],\n\tsearchfield: ''\n   }\n}\ncomponentDidMount() {\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t .then(response=> response.json())\n\t .then (users => this.setState({robots: users}));\n}\n\n onSearchChange = (event) => {\n \tthis.setState({ searchfield: event.target.value})\n\n }\n   render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot =>{\n \t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n \t})\n \treturn !robots.length ?\n \t\t<h1>Loading</h1> :\n \t\t(\n            <div className='tc'>\n              <h1 className='f1'>RoboFreinds</h1>\n              <SearchBox searchChange={this.onSearchChange}/>\n              <Scroll>\n                <CardList robots={filteredRobots} />\n               </Scroll>\n\t        </div>\n    );\n\n}\n\n}\nexport default App","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\n\n","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from './constants.js'\n\nconst initialStateSearch = {\n    searchField : ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n   \n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default :\n            return state;\n    }\n}\n\n    const initialStateRobots = {\n        isPending: false,\n        robots: [],\n        error: '' \n    }\n    \n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n                return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n\nconst logger= createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store= createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n                 <Provider store={store}>\n                 <App />\n                 </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}